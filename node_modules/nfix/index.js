/**********************************************************
 * Author : nanyuantingfeng
 * Timestamp : 2015-11-22 02:47
 **********************************************************/
var Class = require("nclass").Class;

var hasOwnProperty = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;
var slice = Array.prototype.slice;

var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;

var n;

n = Object.create({
    Class : Class,
    merge : merge
});

n.keys = function() {
    return Object.keys.apply(n, arguments);
};

n.checkProperty = function(key) {
    return function(obj) {
        return obj == null ? void 0 : obj[key];
    };
};

n.values = function(obj) {
    var data = [];
    n.each(obj, function(key, value) { data.push(value); });
    return data;
};

n.each = function(obj, f, self) {
    for(var k in obj) if(hasOwnProperty.call(obj, k)) if(f.call(self || obj[k], k, obj[k]) === false) break;
    return obj;
};

n.eachi = function(array, f, self) {
    var i = 0, l = array.length;
    array = array || [];
    for(; i < l; i++)  if(f.call(self || array[i], i, array[i]) === false)  break;
    return array;
};

n.foreach = function(obj, f, self) {
    return n.isArrayLike(obj) ? n.eachi(obj, f, self) : n.each(obj, f, self);
};

n.eachi("Object Arguments Function String Number Date RegExp Error Boolean".split(" "), function(i, name) {
    n['is' + name] = function(obj) {
        return toString.call(obj) === '[object ' + name + ']';
    };
});

merge(n, {
    isArray : function() {
        return Array.isArray.apply(n, arguments);
    },
    isArrayLike : function(collection) {
        var length = n.checkProperty('length')(collection);
        return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
    },
    isObjectLike : function(obj) {
        return !!obj && typeof obj == 'object';
    },
    isEmpty : function(obj) {
        if(obj == null) return true;
        if(n.isArrayLike(obj) && (n.isArray(obj) || n.isString(obj) || n.isArguments(obj))) return obj.length === 0;
        return n.keys(obj).length === 0;
    },
    isNaN : function(obj) {
        return n.isNumber(obj) && isNaN(obj);
    },
    isNull : function(obj) {
        return obj === null;
    },
    isFinite : function(obj) {
        return isFinite(obj) && !isNaN(parseFloat(obj));
    },
    isUndefined : function(obj) {
        return obj === void 0;
    },
    has : function(obj, key) {
        return obj != null && hasOwnProperty.call(obj, key);
    }
});

n.calls = function() {
    var args = slice.call(arguments);

    function f(array, arg) {
        var h = array.pop();
        return h ? f(array, h.call(null, arg)) : arg;
    }

    return f(args, args.pop().call());
};

n.unpack = function(obj) {
    var keys = [];
    var values = [];
    n.each(obj, function(key, value) {
        keys.push(key);
        values.push(value);
    });
    return {keys : keys, values : values};
};

n.pack = function(keys, values) {
    var data = {};
    n.eachi(keys, function(i, key) { data[key] = values[i]; });
    return data;
};

n.Promise = function(f, self) {
    f.bind(self)
    return new Promise(f);
};

n.Promise.all = function(obj) {
    if(n.isArray(obj)) { return Promise.all(obj); }
    var kv = n.unpack(obj);
    return n.Promise(function(resolve, reject) {
        return Promise.all(kv.values).then(function(values) {
            resolve(n.pack(kv.keys, values));
        }, function(error) { reject(error); });
    });
};

module.exports = n.n = n;

function merge() {
    var args, t, u, k;
    args = slice.call(arguments);
    t = args.shift();
    if(!t) t = {};
    u = args.shift();
    if(!u) return t;
    for(k in u)  if(hasOwnProperty.call(u, k))  t[k] = u[k];
    args.unshift(t);
    return merge.apply(null, args);
}
